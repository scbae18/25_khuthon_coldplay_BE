const NbtiResult = require('../models/NbtiResult');
const questions = require('../data/questions');
const User = require('../models/User');

function calcNBIT(answers){
  const Scores = {
    SP:0,
    ID:0,
    CX:0,
    AT:0
  }

  for (const ans of answers) {
    const {id, value, type} = ans;

    if(type=="S"){
      Scores.SP+=(6-value);
    }else if(type=="P"){
      Scores.SP+=value;
    }else if(type=="I"){
      Scores.ID+=(6-value);
    }else if(type=="D"){
      Scores.ID+=value;
    }else if(type=="C"){
      Scores.CX+=(6-value);
    }else if(type=="X"){
      Scores.CX+=value;
    }else if(type=="A"){
      Scores.AT+=(6-value);
    }else if(type=="T"){
      Scores.AT+=value;
    }
  }

  let nbti_name="";
  let explain="";

  const nbti=(Scores.SP<=12 ? 'S' : 'P')+(Scores.ID<=12 ? 'I' : 'D') +(Scores.CX<=12 ? 'C' : 'X') +(Scores.AT<=12 ? 'A' : 'T')
  if(nbti == "SICA"){
    nbti_name = "Í≥†Íµ¨ÎßàÌòï"
    explain = "Îî∞ÎúªÌïòÍ≥† Í∞êÏÑ±Ï†ÅÏù∏ Ï†ÑÌÜµÌåå, Ï°∞Ïö©Ìûà ÏûêÍ∏∞ Í∏∏ÏùÑ Í∞ê."
  }else if(nbti == "SICT"){
    nbti_name = "ÏΩ©ÎÇòÎ¨ºÌòï"
    explain = "Ï†ï ÎßéÏùÄ ÎßàÏùÑ Î¶¨ÎçîÌòï, Î™®ÎëêÏôÄ Ìï®Íªò ÏûêÎùºÎÇ®."
  }else if(nbti == "SIXA"){
    nbti_name = "ÌëúÍ≥†Î≤ÑÏÑØÌòï"
    explain = "Í∑∏ÎäòÏóêÏÑúÎèÑ Ïã§Ìóò Ï†ïÏã† Î∂àÌÉÄÎäî ÏùÄÎëîÌòï Ïã§ÌóòÎü¨."
  }else if(nbti == "SIXT"){
    nbti_name = "ÏºÄÏùºÌòï"
    explain = "ÏßÄÏÜçÍ∞ÄÎä•¬∑Í±¥Í∞ï¬∑ÌòÅÏã†¬∑ÌåÄÏõåÌÅ¨ Îã§ Ïû°Îäî ÏäàÌçºÌë∏ÎìúÌòï."
  }else if(nbti == "SDCA"){
    nbti_name = "Í∞êÏûêÌòï"
    explain = "Îßê Ï†ÅÍ≥† Î∂ÑÏÑù ÏûòÌïòÎäî ÌòÑÏã§ ÎÜçÎ∂Ä. ÌÉÑÌÉÑÌïú Í∏∞Î≥∏Í∏∞."
  }else if(nbti == "SDCT"){
    nbti_name = "ÏñëÎ∞∞Ï∂îÌòï"
    explain = "Î†àÏù¥Ïñ¥ ÎßéÏùÄ Ï†ÑÎûµÍ∞Ä. ÏπúÌôòÍ≤Ω ÎÜçÏóÖÏùò ÏÑ§Í≥ÑÏûê."
  }else if(nbti == "SDXA"){
    nbti_name = "Î∏åÎ°úÏΩúÎ¶¨Ìòï"
    explain = "Ïã†Í∏∞Ïà†Ïóê Í¥ÄÏã¨ ÎßéÏùÄ ÌòºÏûêÌåå. Í∏∞Îä•ÏÑ± ÎÜçÏóÖ ÎßàÎãàÏïÑ."
  }else if(nbti == "SDXT"){
    nbti_name = "ÎëêÏú†Ìòï"
    explain = "Îç∞Ïù¥ÌÑ∞Î°ú ÏõÄÏßÅÏù¥Îäî ÌîÑÎ°úÎìÄÏÑú. ÌòëÏóÖÎèÑ Í∏∞Í∞Ä ÎßâÌûò."
  }else if(nbti == "PICA"){
    nbti_name = "Ïò•ÏàòÏàòÌòï"
    explain = "Í∞êÏúºÎ°ú Îª• Îö´Î¶¨Îäî Ïû•ÏÇ¨ Í∞êÍ∞Å. ÌòºÏûêÏÑúÎèÑ Ï≠âÏ≠â ÏÑ±Ïû•."
  }else if(nbti == "PICT"){
    nbti_name = "Îî∏Í∏∞Ìòï"
    explain = "Ìä∏Î†åÎîîÌïòÍ≥† Í∑ÄÏóΩÍ≤å ÌòëÏóÖÌïòÎäî ÌåÄÌîåÎü¨. Ïù∏Í∏∞ Í∞ë."
  }else if(nbti == "PIXA"){
    nbti_name = "Í≥†Ï∂îÌòï"
    explain = "ÌòºÏûêÏÑúÎèÑ Í∞ïÎ†¨Ìïú Ï°¥Ïû¨Í∞ê. ÏàòÏùµÏóê ÏßÑÏã¨Ïù∏ Ïã§ÌóòÎü¨."
  }else if(nbti == "PIXT"){
    nbti_name = "ÌååÌîÑÎ¶¨Ïπ¥Ìòï"
    explain = "Îã§Ï±ÑÎ°úÏö¥ Ïû¨Îä•! Ïã†ÏÇ¨ÏóÖ¬∑ÌåÄÏõåÌÅ¨ÍπåÏßÄ Îã§ ÎêòÎäî Ïù∏Ïã∏Ìòï."
  }else if(nbti == "PDCA"){
    nbti_name = "ÎåÄÌååÌòï"
    explain = "ÏàòÏùµÍ≥º Îç∞Ïù¥ÌÑ∞Ïóê ÏßÑÏã¨Ïù∏ Î¨µÎ¨µÌïú ÏÜîÎ°ú ÌååÏù¥ÌÑ∞."
  }else if(nbti == "PDCT"){
    nbti_name = "ÎßàÎäòÌòï"
    explain = "ÏàòÏ∂úÎèÑ OK! ÌòÑÏû•Ìòï Ï†ÑÎûµÍ∞Ä. ÏïåÏã∏Ìïú Ï°¥Ïû¨Í∞ê."
  }else if(nbti == "PDXA"){
    nbti_name = "Î∞îÏßàÌòï"
    explain = "ÌòºÏûê R&D Ï¶êÍ∏∞Îäî Ïú†Îßù ÎÜçÏä§ÌÉÄÌä∏ÏóÖ 1Ïù∏Ï∞ΩÏóÖÎü¨."
  }else if(nbti == "PDXT"){
    nbti_name = "ÌÜ†ÎßàÌÜ†Ìòï"
    explain = "ÌåÄÍ≥º Ìï®Íªò Îπ†Î•¥Í≤å ÏõÄÏßÅÏù¥Îäî ÌÖåÌÅ¨ÎÜçÏóÖ CEOÌòï."
  }

  res = {nbti, nbti_name, explain};
  return res;
}

// üîπ Ïó≠Ìï†Î≥Ñ ÏßàÎ¨∏ Ï†úÍ≥µ

exports.getInfo = async (req, res) => {
  const {role, crops}=req.body;
  const userId=req.user.id;
  if (!Array.isArray(crops)) {
    return res.status(400).json({ message: "cropsÎäî Î¨∏ÏûêÏó¥ Î∞∞Ïó¥Ïù¥Ïñ¥Ïïº Ìï©ÎãàÎã§." });
  }
  try{
    await User.findByIdAndUpdate(userId, {
      role,
      crops
    });
    res.json({ message: 'Ï†ÄÏû• ÏôÑÎ£å' });
  }catch (err){
    console.error(err);
    res.status(500).json({ message: "Ïã§Ìå®" });
  }
};
exports.getQuestions = async (req, res) => {
  res.json(questions);
};

// üîπ ÏùëÎãµ Ï†úÏ∂ú (GPT ÏóÜÏù¥ Ïó≠Ìï†ÏùÑ Í≤∞Í≥ºÎ°ú Ï†ÄÏû•)
exports.submitAnswers = async (req, res) => {
    console.log('üî• POST /nbti/submit ÏöîÏ≤≠ ÎèÑÏ∞©:', req.body); 
  const { answers } = req.body;

  if (!answers) {
    return res.status(400).json({ message: 'answersÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.' });
  }
  const result = calcNBIT(answers)
  try {

    await NbtiResult.findOneAndUpdate(
      { userId: req.user.id },
      { result },
      { upsert: true, new: true }
    );

    res.json({ result });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Í≤∞Í≥º Ï†ÄÏû• Ï§ë Ïò§Î•ò Î∞úÏÉù' });
  }
};

// üîπ Í≤∞Í≥º Ï°∞Ìöå
exports.getResult = async (req, res) => {
  const result = await NbtiResult.findOne({ userId: req.user.id });
  if (!result) return res.status(404).json({ message: 'Í≤∞Í≥º ÏóÜÏùå' });
  res.json(result);
};
